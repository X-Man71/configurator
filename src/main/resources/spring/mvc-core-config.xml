<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">


<bean id="templateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<property name="prefix" value="/WEB-INF/" />
		<property name="templateMode" value="HTML5" />
		<property name="suffix" value=".html" />
		<!-- Template cache is set to false (default is true). -->
	</bean>

	<bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
		<property name="additionalDialects">
			<set>
			<!--  	<bean class="org.thymeleaf.extras.tiles2.dialect.TilesDialect" />-->
				<bean
					class="org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect" />
			</set>
		</property>
	</bean>
	
	<!--
    - The ContentNegotiatingViewResolver delegates to the InternalResourceViewResolver and BeanNameViewResolver,
    - and uses the requested media type (determined by the path extension) to pick a matching view. 
    - When the media type is 'text/html', it will delegate to the InternalResourceViewResolver's JstlView, 
    - otherwise to the BeanNameViewResolver.
    -->
    <bean id="contentNegotiatingViewResolver" class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="contentNegotiationManager" ref="cnManager"/>
        
        <property name="viewResolvers">
        	<list>
            
                <!-- Used here for 'xml' and 'atom' views  -->
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
                    <property name="order" value="1"/>
                </bean>
                
                <bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
                    <property name="templateEngine" ref="templateEngine" />
                    <property name="order" value="2"/>
                    <!-- We need to set exclusions because Content Negotiation tries to resolve from -->
                    <!-- Thymeleaf even if a specific view bean (of a different class) is already    -->
                    <!-- found, which might cause exceptions (e.g. ThymeleafView does not have a     -->
                    <!-- 'marshaller' property).                                                     -->
                    <property name="excludedViewNames" value="*.xml" />
                </bean>
        
                 <!-- Default viewClass: JSTL view (JSP with html output) -->
<!--                 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> -->
<!--                     Example: a logical view name of 'vets' is mapped to '/WEB-INF/jsp/vets.jsp' --> 
<!--                     <property name="prefix" value="/WEB-INF/jsp/"/> -->
<!--                     <property name="suffix" value=".jsp"/> -->
<!--                     <property name="order" value="3"/> -->
<!--                 </bean> -->
                
        	</list>
        </property>
    </bean>
    
    
    <!-- Simple strategy: only path extension is taken into account -->
    <bean id="cnManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="favorPathExtension" value="true"/>
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="defaultContentType" value="text/html"/>
        
        <property name="mediaTypes">
            <map>
                <entry key="html" value="text/html" />
                <entry key="xml" value="application/xml" />
                <entry key="atom" value="application/atom+xml" />
            </map>
        </property>
    </bean>


	<!-- Resolves logical view names returned by Controllers to Tiles; a view 
		name to resolve is treated as the name of a tiles definition 
	<bean id="tilesViewResolver" class="org.thymeleaf.spring4.view.AjaxThymeleafViewResolver">
		<property name="viewClass"
			value="org.thymeleaf.extras.tiles2.spring4.web.view.FlowAjaxThymeleafTilesView" />
		<property name="templateEngine" ref="templateEngine" />
	</bean>

	<bean id="tilesConfigurer"
		class="org.thymeleaf.extras.tiles2.spring4.web.configurer.ThymeleafTilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/**/views.xml</value>
			</list>
		</property>
	</bean>
-->


    <!--
        - POJOs labeled with the @Controller and @Service annotations are auto-detected.
    -->
    <context:component-scan
            base-package="de.hs.furtwangen.bam.jee.configurator.web"/>

    <mvc:annotation-driven/>

    <!--  all resources inside folder src/main/webapp/resources are mapped so they can be refered to inside JSP files
        (see header.jsp for more details) -->
    <mvc:resources mapping="/resources/**" location="/resources/"/>

    <!-- uses WebJars so Javascript and CSS libs can be declared as Maven dependencies (Bootstrap, jQuery...) -->
    <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>

   

</beans>
